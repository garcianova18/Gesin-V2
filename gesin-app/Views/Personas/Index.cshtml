@using gesin_app.ViewModel;
@model IEnumerable<PersonaView>
@{
    ViewData["Title"] = "Mantenimiento Personas";

    List<SelectListItem> Funciones = new List<SelectListItem>();

    Funciones = ViewBag.funciones;

    int conteo =1;

   
}



    <style>

        .btn-agregar {
            font-size: 25px;
        }


        .btn-eliminar {
            font-size: 25px;
        }
    </style>




    <div class="row">

        <div class="col-12 d-flex justify-content-center mb-5">

            <h3>Personas</h3>
        </div>

        <div class="col-12 d-flex justify-content-center mb-5">

            <!-- Button trigger modal crear persona -->
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#crear_persona">

                <div class="d-flex align-items-center">


                    <span class="px-2">agregar</span> <i class="fa-solid fa-circle-plus btn-agregar"></i>


                </div>

            </button>

            <!------------- Moda para crear una nueva Persona -------->
            <div class="modal fade" id="crear_persona" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="staticBackdropLabel">Agregar nueva Persona</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>

                        <form id="formPersona" method="post">

                            <div class="modal-body">


                               <div class="row">
                                    <div class="col-12 col-md-6 mb-3">

                                       
                                        <input id="nombrePersona" class="form-control form-control-sm" placeholder="Nombre" />

                                    </div>

                                    <div class="col-12 col-md-6 mb-3 ">

                                        
                                        <input id="codigoPersona" class="form-control form-control-sm " placeholder="Codigo" />
                                    </div>

                                    <div class="col-12 col-md-6 offset-md-3 mb-3">


                                        
                                        <select class="form-control form-control-sm" id="funcionPersona" asp-items="@Funciones"></select>
                                    </div>


                               </div>

                            </div>
                            <div class="modal-footer " id="btnfooter">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="btnCerrarCrear">Cerrar</button>
                                <input type="submit" class="btn btn-primary" value="Agregar" id="btnenviar">
                            </div>
                        </form>
                    </div>
                </div>
            </div>


        </div>

        <div class="col col-sm-8 m-auto">





            <table class="table  table-bordered  " id="tablita" >

                <thead class="table-dark text-center ">

                    <tr>
                        
                        <th>#</th>
                        <th>@Html.DisplayNameFor(model => model.Nombre)</th>
                        <th>@Html.DisplayNameFor(model => model.Codigo)</th>
                        <th>@Html.DisplayNameFor(model => model.IdFuncionNavigationNombre)</th>

                        <th>Operaciones</th>



                    </tr>


                </thead>


            <tbody id="pintardata">

               
                    @foreach (var item in Model)
                    {
                            <tr>
                                <td>@(conteo++)</td>
                                <td>@Html.DisplayFor(model => item.Nombre)</td>
                                <td>@Html.DisplayFor(model => item.Codigo)</td>
                                <td>@Html.DisplayFor(model => item.IdFuncionNavigationNombre)</td>
                                

                                <td class="d-flex justify-content-around">



                                    <!-- Button trigger modal -->

                                    <button onclick="cargarDataPersona(@item.Id)" type="button" class="btn btn-sm btn-success " data-bs-toggle="modal" data-bs-target="#editarPersona">

                                        <div class="d-flex align-items-center">

                                            <i class="fa-solid fa-pen-to-square px-2"></i>

                                        </div>

                                    </button>

                                    <button onclick="EliminarPersona(@item.Id)" type="button" class="btn btn-sm btn-danger ">

                                        <div class="d-flex align-items-center">

                                            <i class="fas fa-regular fa-trash px-2"></i>

                                        </div>

                                    </button>




                                </td>




                            </tr>

                    }






               

                    
                    <!--Aqi se va a cargar la data de manera asincrono-->

                </tbody>



            </table>




        </div>


    </div>


    <!------------------------Modal para editar una Persona ---------------------------->

    <div class="modal fade" id="editarPersona" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Editar Persona</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
            <form id="formPersonaEditar" method="post">

                <div class="modal-body">


                    <div class="row">
                        <input id="idpersona" class="form-control form-control-sm" readonly hidden/>

                        <div class="col-12 col-md-6 mb-3">


                            <input id="nombrePersonaEditar" class="form-control form-control-sm" placeholder="Nombre" />

                        </div>

                        <div class="col-12 col-md-6 mb-3 ">


                            <input id="codigoPersonaEditar" class="form-control form-control-sm " placeholder="Codigo" />
                        </div>

                        <div class="col-12 col-md-6 offset-md-3 mb-3">



                            <select class="form-control form-control-sm" id="funcionPersonaEditar" asp-items="@Funciones"></select>
                        </div>


                    </div>

                </div>
                <div class="modal-footer " id="btnfooter">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="btnCerrarEditar">Cerrar</button>
                    <input type="submit" class="btn btn-primary" value="Actualizar" id="btnenviar">
                </div>
            </form>
            </div>
        </div>
    </div>




@section Scripts{

    <script>


        $(document).ready(function () {

          
            $('#tablita').DataTable();
            
        });




        //--------Listar Persona asincrono----------------------
        //function pintardara() {

        //    const url = "/Personas/ListarPersonas";

        //    fetch(url)
        //        .then(res => res.json())
        //        .then(data => {

        //            const pintardata = document.getElementById("pintardata");
        //            let filatabla = "";

        //            let conteo = 0;

        //            for (var i = 0; i < data.length; i++) {

        //                 conteo++;

        //                filatabla += `

        //                                        <tr>
        //                                        <td>${conteo}</td>
        //                                        <td>${data[i].nombre}</td>
        //                                        <td>${data[i].codigo}</td>
        //                                        <td>${data[i].idFuncionNavigationNombre}</td>
        //                                                 <td>probando</td>
                                               



        //                                        </tr>




        //                                         `





        //            }

        //            pintardata.innerHTML = filatabla;


        //        })



        //}




        //------- crear persona asincrono-----------




        //Crear editar personas

        const formPersona = document.getElementById("formPersona");

        formPersona.addEventListener("submit", crearpersonas);

      function crearpersonas(e){


            e.preventDefault();



            const nombre = document.getElementById("nombrePersona").value;
            const codigo = document.getElementById("codigoPersona").value;
            const funcion = document.getElementById("funcionPersona");


            const url = "/Personas/CrearEditar/persona";

            fetch(url, {

                method: 'POST',
                body: JSON.stringify({

                    nombre: nombre,
                    codigo: codigo,
                    idFuncion: Number(funcion.value)



                }),
                headers: {
                    'Content-Type': 'application/json'
                }



            })
                .then(res => res.json())
                .then(data => {

                    if (data == 3) {

                        Swal.fire('Esta Persona ya existe')

                    }
                    else {
                                
                        
                        
                                if (data == 1) {




                                    Swal.fire({
                                        position: 'top-end',
                                        icon: 'success',
                                        title: 'Se ha agregado correctamente',
                                        showConfirmButton: false,
                                        timer: 2000

                                    })  
                                  
                                    //pintardara();

                                   
                                    //document.getElementById("btnCerrarCrear").click();
                                    //formPersona.reset();


                                     document.getElementById('formPersona').submit();

                                }
                                else {


                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Advertencia...',
                                        text: 'Todos los campos son obligatorios',

                                    })
                                }



                         }



                })

        }


        //------------ editar Persona asincrono--------------

        const formPersonaEditar = document.getElementById("formPersonaEditar");


        function editarPersona(e) {


            e.preventDefault();


            const idpersona = document.getElementById("idpersona").value;
            const nombre = document.getElementById("nombrePersonaEditar").value;
            const codigo = document.getElementById("codigoPersonaEditar").value;
            const funcion = document.getElementById("funcionPersonaEditar");


            const url = "/Personas/CrearEditar/persona";

            fetch(url, {

                method: 'POST',
                body: JSON.stringify({

                    id: Number(idpersona),
                    nombre: nombre,
                    codigo: codigo,
                    idFuncion: Number(funcion.value)


                }),
                headers: {
                    'Content-Type': 'application/json'
                }



            })
                .then(res => res.json())
                .then(data => {

                    if (data == 3) {



                        Swal.fire('Esta Persona ya existe')

                    }


                    else if (data == 2) {




                        Swal.fire({
                            position: 'top-end',
                            icon: 'success',
                            title: 'Se ha actualizado correctamente',
                            showConfirmButton: false,
                            timer: 2000
                        })
                     /*   pintardara()*/;

                        //document.getElementById("btnCerrarEditar").click();
                        //formPersonaEditar.reset();

                        document.getElementById('formPersona').submit();
                    }

                    else if (data == 4) {


                        Swal.fire({
                            icon: 'warning',
                            title: 'Advertencia...',
                            text: 'el campo nombre es obligatorio ',
                           
                        })


                    }

                    else {


                        Swal.fire({
                            icon: 'error',
                            title: 'Error...',
                            text: 'Error 404 recurso no encontrado',
                           
                        })

                    }


                  


                })

        }

        formPersonaEditar.addEventListener("submit", editarPersona)


        //------Cargar la data para llenar el formulario a ediar asincrono -----------//
        function cargarDataPersona(idpersona) {


            const url = "Personas/CargarData_editar/?id=" + idpersona;

            fetch(url)
                .then(res => res.json())
                .then(data =>{
                     const idpersona = document.getElementById("idpersona").value = data.id;
                    const nombre = document.getElementById("nombrePersonaEditar").value = data.nombre;
                    const codigo = document.getElementById("codigoPersonaEditar").value = data.codigo;
                    const funcion = document.getElementById("funcionPersonaEditar").value = data.idFuncion;

                })


        }

        function EliminarPersona(idpersona){

            Swal.fire({
                title: 'Estas seguro?',
                text: "No podrás revertir esto!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Si, eliminar!'

            }).then((result) => {

                if (result.isConfirmed) {


                    const url = "/Personas/Eliminar/?id=" + idpersona;

                    fetch(url)
                        .then(res => res.json())
                        .then(data => {

                          

                            if (data == 1) {
                                
                                

                                Swal.fire({
                                    position: 'center',
                                    icon: 'success',
                                    title: 'Se ha eliminado correctamente',
                                    showConfirmButton: false,
                                    timer: 2000
                                })
                                //pintardara();

                                document.getElementById('formPersona').submit();
                            }

                           
                            else {

                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error...',
                                    text: 'Error 404 recurso no encontrado',

                                })

                            }



                        })

                }
            })

        }


    </script>

     

}